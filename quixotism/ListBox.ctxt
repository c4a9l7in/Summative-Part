#BlueJ class context
comment0.target=ListBox
comment0.text=\r\n\ ListBox\r\n\ <p>\r\n\ Collection\ of\ Objects\ that\ is\ displayed\ in\ a\ list\ of\ rows.\ Acts\ very\ much\ like\ an\ ArrayList.<p>\r\n\ The\ collection's\ contents\ are\ shown\ via\ the\ Object's\ toString()\ method.<p>\r\n\ Scrollable\ when\ list\ is\ longer\ than\ height.<p>\r\n\ Implements\ single\ and\ multi\ selecting.<p>\r\n\ When\ has\ focus,\ can\ use\ "up"\ and\ "down"\ arrow\ keys\ to\ move\ selection\ index\ (when\ selection\ count\ equals\ 1)\ up\ and\ down\ through\ the\ list.<p>\r\n\ <p>\r\n\ Action\ listener\:\ hasChanged()\r\n\ \r\n\ @author\ Taylor\ Born\r\n\ @version\ February\ 2011\ -\ April\ 2014\r\n
comment1.params=size\ objs
comment1.target=ListBox(java.awt.Point,\ java.util.ArrayList)
comment1.text=\r\n\ Create\ a\ new\ ListBox.\r\n\ @param\ size\ The\ width\ and\ height\ of\ the\ ListBox.\r\n\ @param\ objs\ The\ list\ of\ Objects\ to\ display\ in\ the\ ListBox.\r\n
comment10.params=
comment10.target=void\ deselect()
comment10.text=\r\n\ Deselect\ selection.\r\n
comment11.params=
comment11.target=boolean\ hasChanged()
comment11.text=\r\n\ Action\ listener\ for\ when\ selection\ has\ been\ altered.\r\n\ @return\ Whethor\ or\ not\ selection\ has\ been\ altered\ since\ last\ call.\r\n
comment12.params=index
comment12.target=void\ setIndex(int)
comment12.text=\r\n\ Set\ which\ item\ to\ be\ selected.\r\n\ @param\ index\ The\ index\ of\ the\ item\ to\ be\ selected.\r\n\ @see\ addIndex(int)\r\n
comment13.params=index
comment13.target=void\ addIndex(int)
comment13.text=\r\n\ Cause\ the\ Object\ at\ the\ given\ index\ to\ be\ selected.\ Meant\ to\ be\ used\ when\ multiple\ selecting\ is\ enabled.\r\n\ @param\ index\ The\ index\ of\ the\ Object\ to\ be\ selected.\r\n\ @see\ setIndex(int)\r\n
comment14.params=index
comment14.target=void\ setIndexInView(int)
comment14.text=\r\n\ Ajust\ scroll\ amount\ to\ set\ the\ Object\ determined\ by\ the\ given\ index,\ to\ be\ in\ view.\r\n\ @param\ index\ Index\ for\ Object\ to\ be\ set\ to\ be\ in\ view.\r\n
comment15.params=
comment15.target=boolean\ hasSelection()
comment15.text=\r\n\ Determine\ if\ there\ are\ any\ Objects\ selected.\r\n\ @return\ Whether\ there\ are\ any\ Objects\ selected.\r\n
comment16.params=index
comment16.target=void\ toggleSelect(int)
comment16.text=\r\n\ Toggle\ the\ Object\ at\ the\ given\ index\ to\ be\ selected\ or\ not\ be\ selected.\r\n\ @param\ index\ The\ index\ of\ Object\ to\ toggle\ selection.\r\n
comment17.params=indexA\ indexB
comment17.target=void\ swap(int,\ int)
comment17.text=\r\n\ Swap\ two\ Objects\ in\ position.\ If\ Objects\ are\ selected,\ they\ will\ remain\ selected\ after\ the\ swap.\r\n\ @param\ indexA\ Index\ of\ Object\ to\ swap\ position.\r\n\ @param\ indexB\ Index\ of\ Object\ to\ swap\ position.\r\n
comment18.params=
comment18.target=java.lang.Object\ getOneSelection()
comment18.text=\r\n\ Get\ the\ selected\ Object.\ Meant\ to\ be\ used\ when\ multiple\ selecting\ is\ disabled,\ otherwise\ getSelection()\ is\ more\ appropriate.\r\n\ @return\ The\ selected\ Object.\ Null\ if\ none\ selected.\r\n\ @see\ getSelection()\r\n
comment19.params=
comment19.target=java.util.ArrayList\ getSelection()
comment19.text=\r\n\ Get\ all\ selected\ Object.\ Meant\ to\ be\ used\ when\ multiple\ selecting\ is\ enabled,\ otherwise\ getOneSelection()\ is\ more\ appropriate.\r\n\ @return\ The\ selected\ Objects.\ Null\ if\ none\ selected.\r\n\ @see\ getOneSelection()\r\n
comment2.params=size
comment2.target=void\ resize(java.awt.Point)
comment20.params=index
comment20.target=java.lang.Object\ get(int)
comment20.text=\r\n\ Get\ the\ Object\ in\ the\ ListBox\ at\ the\ given\ index.\r\n\ @param\ index\ The\ index\ for\ what\ Object\ in\ the\ ListBox\ to\ get.\r\n\ @return\ The\ Object\ at\ the\ index\ of\ the\ ListBox.\ Null\ if\ invalid\ index.\r\n
comment21.params=
comment21.target=java.util.ArrayList\ getList()
comment21.text=\r\n\ Get\ the\ contents\ of\ the\ ListBox.\r\n\ @return\ The\ contents\ of\ the\ ListBox.\r\n
comment22.params=s
comment22.target=boolean\ contains(java.lang.Object)
comment22.text=\r\n\ Determine\ whethor\ or\ not\ the\ given\ Object\ is\ contained\ within\ the\ list.\r\n\ @param\ The\ Object\ in\ question.\r\n\ @return\ Whethor\ or\ not\ the\ given\ Object\ is\ contained\ within\ the\ list.\r\n
comment23.params=s
comment23.target=int\ indexOf(java.lang.Object)
comment23.text=\r\n\ Determine\ the\ index\ for\ where\ the\ given\ Object\ lies\ within\ the\ list.\r\n\ @param\ The\ Object\ in\ question.\r\n\ @return\ The\ index\ for\ where\ the\ given\ Object\ lies\ within\ the\ list.\r\n
comment24.params=list
comment24.target=void\ setList(java.util.ArrayList)
comment24.text=\r\n\ Set\ the\ contents\ to\ the\ given\ list.\r\n\ @param\ list\ New\ list\ of\ Objects.\r\n
comment25.params=s
comment25.target=void\ add(java.lang.Object)
comment25.text=\r\n\ Add\ an\ Object\ to\ the\ ListBox,\ making\ it\ selected\ and\ in\ view.\r\n\ @param\ s\ The\ Object\ to\ be\ added.\r\n
comment26.params=s\ index
comment26.target=void\ add(java.lang.Object,\ int)
comment26.text=\r\n\ Insert\ an\ Object\ to\ the\ ListBox\ at\ the\ given\ position,\ making\ it\ selected\ and\ in\ view.\r\n\ @param\ s\ The\ Object\ to\ be\ inserted.\r\n\ @param\ index\ The\ position\ to\ insert\ String.\r\n
comment27.params=
comment27.target=void\ removeSelected()
comment27.text=\r\n\ Remove\ what\ is\ selected.\r\n
comment28.params=
comment28.target=int\ size()
comment28.text=\r\n\ Get\ the\ number\ of\ Objects\ in\ the\ ListBox's\ collection.\r\n\ @return\ The\ number\ of\ Objects\ in\ the\ ListBox's\ collection.\r\n
comment29.params=
comment29.target=void\ clear()
comment29.text=\r\n\ Remove\ everything\ from\ the\ ListBox.\r\n
comment3.params=
comment3.target=void\ redraw()
comment30.params=index\ obj
comment30.target=void\ set(int,\ java.lang.Object)
comment30.text=\r\n\ Change\ the\ Object\ at\ a\ given\ index.\r\n\ @param\ index\ The\ index\ in\ the\ ListBox\ to\ change.\r\n\ @param\ obj\ The\ Object\ to\ set\ to\ at\ the\ given\ index.\r\n
comment31.params=
comment31.target=boolean\ multipleSelectingIsEnabled()
comment31.text=\r\n\ Determine\ if\ the\ ListBox\ is\ set\ to\ allow\ multiple\ selecting\ of\ Objects.\r\n\ @return\ If\ the\ ListBox\ is\ set\ to\ allow\ multiple\ selecting\ of\ Objects.\r\n
comment32.params=enable
comment32.target=void\ setMultipleSelecting(boolean)
comment32.text=\r\n\ Change\ if\ the\ ListBox\ is\ set\ to\ allow\ multiple\ selecting\ of\ Objects.\r\n\ @param\ enable\ If\ the\ ListBox\ will\ be\ set\ to\ allow\ multiple\ selecting\ of\ Objects.\r\n
comment33.params=
comment33.target=void\ sort()
comment4.params=font
comment4.target=void\ setFont(greenfoot.Font)
comment5.params=scroll
comment5.target=void\ setScrollColor(greenfoot.Color)
comment6.params=
comment6.target=void\ draw()
comment6.text=\r\n\ Update\ the\ ListBox's\ image.\r\n
comment7.params=
comment7.target=void\ act()
comment7.text=\r\n\ Act.\r\n
comment8.params=
comment8.target=java.util.ArrayList\ getIndexes()
comment8.text=\r\n\ Get\ the\ indexes\ of\ what\ is\ selected.\ Meant\ to\ be\ used\ when\ multiple\ selecting\ is\ enabled,\ otherwise\ getOneIndex()\ is\ more\ appropriate.\r\n\ @return\ The\ indexes\ of\ what\ is\ selected.\r\n\ @see\ getOneIndex()\r\n
comment9.params=
comment9.target=int\ getOneIndex()
comment9.text=\r\n\ Get\ the\ index\ of\ what\ is\ selected.\ Meant\ to\ be\ used\ when\ multiple\ selecting\ is\ disabled,\ otherwise\ getIndexes()\ is\ more\ appropriate.\r\n\ @return\ The\ index\ of\ what\ is\ selected.\ -1\ if\ none\ selected.\r\n\ @see\ getIndexes()\r\n
numComments=34
